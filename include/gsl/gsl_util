///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2015 Microsoft Corporation. All rights reserved.
//
// This code is licensed under the MIT License (MIT).
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#pragma once

#ifndef GSL_UTIL_H
#define GSL_UTIL_H

#include <gsl/gsl_assert> // Ensures/Expects

#include <array>
#include <exception>
#include <type_traits>
#include <utility>

#if defined(_MSC_VER)

#pragma warning(push)
#pragma warning(disable : 4127) // conditional expression is constant

#if _MSC_VER < 1910
#pragma push_macro("constexpr")
#define constexpr /*constexpr*/
#endif                          // _MSC_VER < 1910
#endif                          // _MSC_VER

#ifndef GSL_USE_DEDUCTION_GUIDES
#ifdef __cpp_deduction_guides
#define GSL_USE_DEDUCTION_GUIDES __cpp_deduction_guides
#elif !(defined(__GNUC__) || defined(__clang__)) && __cplusplus >= 201703L
#define GSL_USE_DEDUCTION_GUIDES 201611L
#else
#define GSL_USE_DEDUCTION_GUIDES 0
#endif
#endif // GSL_USE_DEDUCTION_GUIDES

namespace gsl
{
//
// GSL.util: utilities
//

// final_act allows you to ensure something gets run at the end of a scope
template <class F>
class final_act
{
    template <class FF>
    using init_type = std::conditional_t<
        !std::is_lvalue_reference<FF>::value &&
            std::is_nothrow_constructible<F, FF>::value,
        FF&&, const FF&>;

    using copy_type = std::conditional_t<
        std::is_nothrow_move_constructible<F>::value, F&&, const F&>;
public:
    template <class FF,
        std::enable_if_t<std::is_constructible<F, FF>::value>* = nullptr>
    explicit final_act(FF&& f)
    try : f_(static_cast<init_type<FF>>(f)) {}
    catch(...) {
        f();
        throw;
    }

    final_act(final_act&& other)
        noexcept(std::is_nothrow_move_constructible<F>::value ||
            std::is_nothrow_copy_constructible<F>::value)
        : f_(static_cast<copy_type>(other.f_))
        , invoke_(other.invoke_)
    {
        other.release();
    }

    ~final_act() noexcept
    {
        if (invoke_) f_();
    }

    void release() noexcept
    {
        invoke_ = false;
    }

    final_act& operator=(final_act&&) = delete;

private:
    F f_;
    bool invoke_ = true;
};

#if GSL_USE_DEDUCTION_GUIDES
template <class F>
final_act(F&&) -> final_act<std::decay_t<F>>;
#endif

// finally() - convenience function to generate a final_act
template <class F>
inline final_act<std::decay_t<F>> finally(F&& f)
{
    return final_act<std::decay_t<F>>(std::forward<F>(f));
}

// narrow_cast(): a searchable way to do narrowing casts of values
template <class T, class U>
inline constexpr T narrow_cast(U&& u) noexcept
{
    return static_cast<T>(std::forward<U>(u));
}

struct narrowing_error : public std::exception
{
};

namespace details
{
    template <class T, class U>
    struct is_same_signedness
        : public std::integral_constant<bool, std::is_signed<T>::value == std::is_signed<U>::value>
    {
    };
}

// narrow() : a checked version of narrow_cast() that throws if the cast changed the value
template <class T, class U>
inline T narrow(U u)
{
    T t = narrow_cast<T>(u);
    if (static_cast<U>(t) != u) throw narrowing_error();
    if (!details::is_same_signedness<T, U>::value && ((t < T{}) != (u < U{})))
        throw narrowing_error();
    return t;
}

//
// at() - Bounds-checked way of accessing builtin arrays, std::array, std::vector
//
template <class T, std::size_t N>
inline constexpr T& at(T (&arr)[N], const std::ptrdiff_t index)
{
    Expects(index >= 0 && index < narrow_cast<std::ptrdiff_t>(N));
    return arr[static_cast<std::size_t>(index)];
}

template <class Cont>
inline constexpr auto at(Cont& cont, const std::ptrdiff_t index) -> decltype(cont[cont.size()])
{
    Expects(index >= 0 && index < narrow_cast<std::ptrdiff_t>(cont.size()));
    using size_type = decltype(cont.size());
    return cont[static_cast<size_type>(index)];
}

template <class T>
inline constexpr T at(const std::initializer_list<T> cont, const std::ptrdiff_t index)
{
    Expects(index >= 0 && index < narrow_cast<std::ptrdiff_t>(cont.size()));
    return *(cont.begin() + index);
}

} // namespace gsl

#if defined(_MSC_VER)
#if _MSC_VER < 1910
#undef constexpr
#pragma pop_macro("constexpr")

#endif // _MSC_VER < 1910

#pragma warning(pop)

#endif // _MSC_VER

#endif // GSL_UTIL_H
